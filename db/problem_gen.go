// Auto generated by gendb. DO NOT EDIT.
package db

import (
	"errors"
	"fmt"
	"time"
)

const (
	ProblemSelectCols = "id, name, statement, score, is_flag, flag"
	ProblemTable      = "problems"
)

var (
	ErrNotCreatedProblem = errors.New(`given problem is not created on database`)
)

func (problem *Problem) Scan(scanner Scanner) error {
	return scanner.Scan(
		&problem.ID,
		&problem.Name,
		&problem.Statement,
		&problem.Score,
		&problem.IsFlag,
		&problem.Flag,
	)
}
func (problem *Problem) LoadByID(tx *Tx, id string) error {
	sql := fmt.Sprintf(`SELECT %s FROM %s WHERE id = ?`, ProblemSelectCols, ProblemTable)
	stmt, err := db.Prepare(sql)
	if err != nil {
		return err
	}
	row := tx.Stmt(stmt).QueryRow(id)
	if err := problem.Scan(row); err != nil {
		return err
	}
	return nil
}
func (problem *Problem) Create(tx *Tx) error {
	problem.CreatedOn = time.Now()
	stmt := fmt.Sprintf(`INSERT INTO %s (id, name, statement, score, is_flag, flag) VALUES (?, ?, ?, ?, ?, ?)`, ProblemTable)
	result, err := tx.Exec(stmt, problem.ID, problem.Name, problem.Statement, problem.Score, problem.IsFlag, problem.Flag)
	if err != nil {
		return err
	}
	lid, err := result.LastInsertId()
	if err != nil {
		return err
	}
	problem.ID = int(lid)
	return nil
}

func (problem *Problem) Update(tx *Tx) error {
	if problem.ID == 0 {
		return ErrNotCreatedProblem
	}
	sql := fmt.Sprintf(`UPDATE %s SET id = ?, name = ?, statement = ?, score = ?, is_flag = ?, flag = ?`, ProblemTable)
	stmt, err := db.Prepare(sql)
	if err != nil {
		return err
	}
	_, err = tx.Stmt(stmt).Exec(problem.ID, problem.Name, problem.Statement, problem.Score, problem.IsFlag, problem.Flag)
	return err
}

func (problem *Problem) Delete(tx *Tx) error {
	if problem.ID == 0 {
		return ErrNotCreatedProblem
	}
	sql := fmt.Sprintf(`DELETE FROM %s WHERE id = ?`, ProblemTable)
	stmt, err := db.Prepare(sql)
	if err != nil {
		return err
	}
	_, err = tx.Stmt(stmt).Exec(problem.ID)
	return err
}
