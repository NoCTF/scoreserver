// Auto generated by gendb. DO NOT EDIT.
package db

import (
	"errors"
	"fmt"
	"time"
)

const (
	TeamSelectCols = "id, name"
	TeamTable      = "teams"
)

var (
	ErrNotCreatedTeam = errors.New(`given team is not created on database`)
)

func (team *Team) Scan(scanner Scanner) error {
	return scanner.Scan(
		&team.ID,
		&team.Name,
	)
}
func (team *Team) LoadByID(tx *Tx, id string) error {
	sql := fmt.Sprintf(`SELECT %s FROM %s WHERE id = ?`, TeamSelectCols, TeamTable)
	stmt, err := db.Prepare(sql)
	if err != nil {
		return err
	}
	row := tx.Stmt(stmt).QueryRow(id)
	if err := team.Scan(row); err != nil {
		return err
	}
	return nil
}
func (team *Team) Create(tx *Tx) error {
	team.CreatedOn = time.Now()
	stmt := fmt.Sprintf(`INSERT INTO %s (id, name) VALUES (?, ?, ?, ?, ?, ?)`, TeamTable)
	result, err := tx.Exec(stmt, team.ID, team.Name)
	if err != nil {
		return err
	}
	lid, err := result.LastInsertId()
	if err != nil {
		return err
	}
	team.ID = int(lid)
	return nil
}

func (team *Team) Update(tx *Tx) error {
	if team.ID == 0 {
		return ErrNotCreatedTeam
	}
	sql := fmt.Sprintf(`UPDATE %s SET id = ?, name = ?`, TeamTable)
	stmt, err := db.Prepare(sql)
	if err != nil {
		return err
	}
	_, err = tx.Stmt(stmt).Exec(team.ID, team.Name)
	return err
}

func (team *Team) Delete(tx *Tx) error {
	if team.ID == 0 {
		return ErrNotCreatedTeam
	}
	sql := fmt.Sprintf(`DELETE FROM %s WHERE id = ?`, TeamTable)
	stmt, err := db.Prepare(sql)
	if err != nil {
		return err
	}
	_, err = tx.Stmt(stmt).Exec(team.ID)
	return err
}
